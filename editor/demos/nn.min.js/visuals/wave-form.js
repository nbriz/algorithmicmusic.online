// create canvas (for waveforme visualization)
const c = nn.create('canvas').addTo('body')
c.width = nn.width
c.height = 200
c.strokeStyle = '#f92672'
c.lineWidth = 2

// Tone.js graph
const osc = new Tone.Oscillator(440, 'square')
const gain = new Tone.Gain(0.5)
const analyser = new Tone.Analyser('waveform', 2048)
// (osc)---(gain)---(speakers)
//             `---(analyser)`
osc.connect(gain)
gain.toDestination()
gain.connect(analyser)


// animation function, draws the waveform to the canvas
function draw () {
  requestAnimationFrame(draw) // recursively call draw ~60fps
  c.clearRect(0, 0, c.width, c.height) // clear background

  // only draw waveform if audio is running or analyser has data
  const data = analyser.getValue() // Float32Array in [-1, 1]
  if (!data || data.length === 0) return

  // draw the waveform...
  c.beginPath()
  const stepX = c.width / data.length
  let x = 0
  for (let i = 0; i < data.length; i++) {
    // normalize the data, by scaling it to the canvas
    // map data [-1, 1] to canvas range [0, half height]
    const y = nn.map(data[i], -1, 1, 0, c.height)
    if (i === 0) c.moveTo(x, y)
    else c.lineTo(x, y)
    x += stepX
  }
  c.lineTo(c.width, c.height / 2)
  c.stroke()
}


async function playTone () {
  osc.start()
  await nn.sleep(2000)
  osc.stop()
}

// create button to play tone
nn.create('button')
  .content('play')
  .addTo('body')
  .on('click', playTone)

// start animation loop when page loads
nn.on('load', draw)
