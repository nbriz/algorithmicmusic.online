// canvas for frequency-bars visualization
const c = nn.create('canvas').addTo('body')
c.width = nn.width
c.height = 200
// set colors
c.strokeStyle = '#f92672'
c.fillStyle = '#f92672'


// use FFT analyser to split audio into frequency "bins"
// size is the number of output bins (try 512/1024/2048)
const analyser = new Tone.Analyser('fft', 512)
// smoothing in [0..1] controls visual inertia
analyser.smoothing = 0.8


// a Tone.js player
const filePath = 'https://algorithmicmusic.online/audios/amen-break.mp3'
const player = new Tone.Player(filePath).toDestination()
player.connect(analyser)
// (player)---(speakers)
//        `---(analyser)`


// a Tone.js Synth
const synth = new Tone.Synth().toDestination()
synth.connect(analyser)
// (synth)---(speakers)
//       `---(analyser)`


// animation function, draws the frequency bars to the canvas
function draw () {
  requestAnimationFrame(draw) // recursively call draw ~60fps
  c.clearRect(0, 0, c.width, c.height) // clear background

  // only draw frequency bars if analyser has data
  const data = analyser.getValue() // array of freq db levels
  if (!data || data.length === 0) return

  // draw bars
  const barCount = analyser.size
  for (let i = 0; i < barCount; i++) {
    const db = data[i]
    // bar width = canvas width / amount of bins
    const w = c.width / barCount
    // map db value (-100 -> 0) to height value (0 -> height)
    const h = nn.map(db, -100, 0, 0, c.height)
    // x/y position
    const x = i * w
    const y = c.height - h
    c.rect(x, y, w, h)
  }
}

// UI
nn.create('button')
  .content('player start')
  .addTo('body')
  .on('click', () => player.start())

nn.create('button')
  .content('play synth')
  .addTo('body')
  .on('click', () => synth.triggerAttackRelease(440, 0.5))

// start animation loop when page loads
nn.on('load', draw)
